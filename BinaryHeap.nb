BinaryHeapQ[a : {___?NumberQ}] :=
 Module[{n = Length@a, chek = True},
  For[i = n, i > 1, i--,
   If[a[[i]] > a[[Floor[i/2]]], chek = False; Break;];];
  chek]
InsertBinaryHeap[a_?BinaryHeapQ, n_?NumberQ] :=
 Module[{i, s, j},
  s = Append[a, n];
  i = Length@s;
  j = Floor[i/2];
  While [s[[i]] > s[[j]],
   {s[[i]], s[[j]]} = {s[[j]], s[[i]]};
   i = j;
   j = Floor[i/2];
   ];
  s]
DeleteFirstBinaryHeap[a_?BinaryHeapQ] :=
 Module[{s, i, n},
  s = a;
  {s[[1]], s[[-1]]} = {s[[-1]], s[[1]]};
  s = Most[s];
  n = Length@s;
  i = 1;
  While[True,
   If[2 i > n, Break[]];
   If[2 i == n, 
    If[s[[2 i]] > s[[i]], {s[[i]], s[[2 i]]} = {s[[2 i]], s[[i]]}; 
     Break[]];
    Break[]; ];
   If[s[[2 i]] > s[[i]] \[Or] s[[2 i + 1]] > s[[i]],
    If[s[[2 i + 1]] > s[[2 i]],
     {s[[i]], s[[2 i + 1]]} = {s[[2 i + 1]], s[[i]]}; i = 2 i + 1,
     {s[[i]], s[[2 i]]} = {s[[2 i]], s[[i]]}; i = 2 i], Break[]; ];];
  s]
  BuildBinaryHeap[a_ : {___?NumberQ}] := Module[{s, i, k, n},
  s = a; n = Length@s; For[k = Floor[n/2], k >= 1, k--,
   i = k;
   While[True,
    If[2 i > n, Break[]];
    If[2 i == n, 
     If[s[[2 i]] > s[[i]], {s[[i]], s[[2 i]]} = {s[[2 i]], s[[i]]}; 
      Break[]];
     Break[]; ];
    If[s[[2 i]] > s[[i]] \[Or] s[[2 i + 1]] > s[[i]],
     If[2 i + 1 <= n \[And] s[[2 i + 1]] > s[[2 i]],
      {s[[i]], s[[2 i + 1]]} = {s[[2 i + 1]], s[[i]]}; i = 2 i + 1,
      {s[[i]], s[[2 i]]} = {s[[2 i]], s[[i]]}; i = 2 i], 
     Break[]; ];];];
  s ]
